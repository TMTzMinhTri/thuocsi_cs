{"version":3,"sources":["Api/TaskManager/index.ts","Store/actions/task_manager.actions.ts","Screens/TaskManagerScreen/TaskBoard/DetailTask/CommentList/index.tsx","Screens/TaskManagerScreen/TaskBoard/DetailTask/CommentInput/index.tsx","Screens/TaskManagerScreen/TaskBoard/DetailTask/index.tsx","Screens/TaskManagerScreen/TaskBoard/Header/index.tsx","Screens/TaskManagerScreen/TaskBoard/ListTask/index.tsx","Screens/TaskManagerScreen/TaskBoard/index.tsx","Screens/TaskManagerScreen/FilterControl/DatePicker/index.tsx","Screens/TaskManagerScreen/FilterControl/SearchOrder/index.tsx","Screens/TaskManagerScreen/FilterControl/SelectAssignedMember/index.tsx","Screens/TaskManagerScreen/FilterControl/SelectReason/index.tsx","Screens/TaskManagerScreen/FilterControl/SelectStatus/index.tsx","Screens/TaskManagerScreen/FilterControl/index.tsx","Screens/TaskManagerScreen/index.tsx","Layout/AdminLayout/SideBar.tsx","Layout/AdminLayout/NavBar.tsx","Layout/AdminLayout/index.tsx"],"names":["get_list_cs_task","userInput","Api","post","getListTask","dispatch","getState","task_manager","then","rsp","code","test","data","cs_tasks","map","it","comments","id","_","random","content","created_at","Date","type","GET_LIST_TASK_SUCCESS","payload","getListTaskByFilter","user_input","UPDATE_USER_INPUT","LOADING_TABLE","createCommentInTask","comment","callback","task_selected","taskIndex","findIndex","updateListCsTasks","set","newTaskSelected","CREATE_COMMENT","selectDetailTask","task_id","task","find","TASK_SELECTED","CommentList","React","className","cm","index","key","Components","name","target","Utils","FormatDateBy_YYYY_MM_DD","converTime","datetime","CommentInput","withRouter","CreateComment","currentUser","location","isInput","setIsInput","formRef","inputRef","endRef","toggleInput","current","focus","isEmpty","values","resetForm","ref","FormGroup","Label","for","classNames","innerRef","initialValues","onSubmit","setSubmitting","scrollIntoView","behavior","isSubmitting","component","BaseInput","placeholder","Button","color","disabled","onClick","role","roles","action","DetailTaskComponent","path","history","getQueryparams","refDetail","parseInt","replace","scrollTo","top","to","aria-hidden","cs_note","failure_type_names","item","Badge","pill","CardTitle","CardText","formatCurrency","total","quantity_counter","so_id","order_id","order_status","return_id","business_name","user_name","user_phone","DetailTask","connect","state","layout","user","bindActionCreators","HeaderBoard","style","width","textOverflow","whiteSpace","maxWidth","textAlign","renderTableRow","colSpan","ListTask","loading","taskSelected","length","overflow","primary","status","StatusTask","assigned","danger","pending","success","done","secondary","canceled","info","in_progress","created_by","src","alt","TaskBoard","Table","hover","tableLayout","DatePicker","startDate","setStartDate","endDate","setEndDate","Col","md","selected","onChange","date","selectsStart","selectsEnd","maxDate","minDate","SearchOrder","Input","SelectAssignedMember","listMember","options","label","value","SelectReason","listReason","isMulti","components","ValueContainer","children","props","getValue","selectedC","toArray","filter","indexOf","closeMenuOnSelect","openMenuOnClick","hideSelectedOptions","SelectStatus","DefaultValue","listTaskStatus","FilterControl","setListReason","setListMember","Promise","all","get","Row","TaskManagerScreen","task_manager_state","useRouteMatch","handlePagination","page","Card","CardBody","perpage","totalRecords","total_count","size","onChangePage","ListMenu","icon","SideBar","onRouteChanged","body","document","querySelector","querySelectorAll","forEach","el","addEventListener","classList","contains","add","remove","href","height","viewBox","fill","xmlns","cx","cy","r","stroke","strokeWidth","d","activeClassName","Logo","NavBar","signOut","evt","preventDefault","toggle","UncontrolledDropdown","DropdownToggle","DropdownMenu","right","DropdownItem","Topic","Screens"],"mappings":"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","file":"static/js/6.b626f4a1.chunk.js","sourcesContent":["import { Api } from '..';\nimport { IResponeListTasks, IResponeListReason } from 'Interface/Response/task_manager.types';\nimport { IUserInput } from 'Interface/Store/task_manager.types';\nimport { IResponseUser } from 'Interface/Response/session.types';\n\nexport const getListAddress = () => {\n  return Api.get('/api/v1/addresses/city_list');\n};\n\nexport const get_list_cs_task = (userInput: IUserInput) => {\n  const path = `/api/cs/v1/cs_tasks/list`;\n  return Api.post<IResponeListTasks>(path, userInput);\n};\n\nexport const getListReason = () => {\n  const path = `/api/v1/orders/reason_list`;\n  return Api.get<IResponeListReason[]>(path);\n};\n\nexport const getListMember = () => {\n  const path = `/api/cs/v1/group_members`;\n  return Api.get<IResponseUser[]>(path);\n};\n","import { RootAction } from 'Interface/Store/index.types';\nimport { Dispatch } from 'redux';\nimport { get_list_cs_task } from 'Api/TaskManager';\nimport { GET_LIST_TASK_SUCCESS, UPDATE_USER_INPUT, IUserInput, LOADING_TABLE, CREATE_COMMENT, TASK_SELECTED } from 'Interface/Store/task_manager.types';\nimport { RootState } from 'Store';\nimport _ from 'lodash';\n\nconst getListTask = () => (dispatch: Dispatch<RootAction>, getState: () => RootState) => {\n  const {\n    task_manager: { userInput },\n  } = getState();\n  get_list_cs_task(userInput).then((rsp) => {\n    if (rsp.code === 'OK') {\n      const test = rsp.data.cs_tasks.map((it) => ({ ...it, comments: [{ id: _.random(1, 10), content: 'comment', created_at: new Date() }] }));\n      dispatch({ type: GET_LIST_TASK_SUCCESS, payload: { ...rsp.data, cs_tasks: test } });\n    }\n  });\n};\n\nconst getListTaskByFilter = (user_input: IUserInput) => (dispatch: Dispatch<RootAction>) => {\n  dispatch({ type: UPDATE_USER_INPUT, payload: user_input });\n  dispatch({ type: LOADING_TABLE });\n  get_list_cs_task(user_input).then((rsp) => {\n    if (rsp.code === 'OK') {\n      const test = rsp.data.cs_tasks.map((it) => ({ ...it, comments: [{ id: _.random(1, 10), content: 'comment', created_at: new Date() }] }));\n      dispatch({ type: GET_LIST_TASK_SUCCESS, payload: { ...rsp.data, cs_tasks: test } });\n    }\n  });\n};\n\nconst createCommentInTask = (comment: string, callback: Function) => (dispatch: Dispatch<RootAction>, getState: () => RootState) => {\n  const {\n    task_manager: { task_selected, cs_tasks },\n  } = getState();\n  const data = task_selected?.comments && [{ id: _.random(1, 10), content: comment, created_at: new Date() }, ...task_selected.comments];\n  const taskIndex = _.findIndex(cs_tasks, (it) => it.id === task_selected?.id);\n  const updateListCsTasks = _.set(cs_tasks, `cstasks[${taskIndex}]comments`, data);\n  const newTaskSelected = task_selected && _.set(task_selected, 'comments', data);\n  dispatch({ type: CREATE_COMMENT, task_selected: newTaskSelected, cs_tasks: updateListCsTasks });\n  callback();\n};\n\nconst selectDetailTask = (task_id: number | null, callback?: Function) => (dispatch: Dispatch<RootAction>, getState: () => RootState) => {\n  const {\n    task_manager: { cs_tasks },\n  } = getState();\n  const task = _.find(cs_tasks, (it) => it.id === task_id);\n  dispatch({ type: TASK_SELECTED, payload: task ? task : null });\n  callback && callback(task);\n};\n\nexport { getListTask, getListTaskByFilter, createCommentInTask, selectDetailTask };\n","import * as React from 'react';\nimport { ITaskComment } from 'Interface/Response/task_manager.types';\nimport * as Components from \"Components\";\nimport Utils from \"Utils\";\n\ninterface ICommentList {\n    comments: ITaskComment[]\n}\n\nexport const CommentList: React.FC<ICommentList> = React.memo(({ comments }) => {\n\n    return <ul className=\"comment_list\" >\n        {comments.map((cm, index) => <li key={`task_comment__item_${index}`} className=\"comment_list__item\">\n            <div><Components.Avata name=\"Minh Tri\" target={`comment_creater_${index}`} /></div>\n            <div className=\"comment_list__item__body\">\n                <div className=\"comment_list__item__title\">\n                    <div className=\"comment_list__item__name\">Minh Tri</div>\n                    <i className=\"text-muted\">\n                        <span className='mx-2'>{Utils.FormatDateBy_YYYY_MM_DD(cm.created_at)}, {Utils.converTime(cm.created_at)}</span>\n                        <Components.TimeAgo datetime={cm.created_at} />\n                    </i>\n                </div>\n                <div className=\"comment_list__item__content\">{cm.content}</div>\n            </div>\n        </li>)}\n    </ul>\n})","import * as React from \"react\";\nimport { Formik, Field, Form, FormikHelpers, FormikProps } from \"formik\";\nimport { Button, Label, FormGroup } from \"reactstrap\";\nimport * as Components from \"Components\";\nimport { isEmpty } from \"lodash\";\nimport { IResponseUser } from \"Interface/Response/session.types\";\nimport { ITaskComment } from \"Interface/Response/task_manager.types\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\ninterface IProps extends RouteComponentProps {\n    name: string,\n    CreateComment: Function,\n    currentUser: IResponseUser | null,\n    comments: ITaskComment[]\n}\n\n\nexport const CommentInputComponent: React.FC<IProps> = ({ name, CreateComment, currentUser, comments, location }) => {\n    const [isInput, setIsInput] = React.useState<boolean>(false)\n    let formRef = React.useRef<FormikProps<{ comment: string }>>(null)\n    let inputRef = React.useRef<HTMLElement>(null)\n    const endRef = React.useRef<HTMLDivElement>(null)\n\n    const submitLogin = (values: { comment: string }, { resetForm, setSubmitting }: FormikHelpers<{ comment: string }>) => {\n        if (isEmpty(values.comment)) {\n            setSubmitting(false)\n            return\n        }\n        CreateComment(values.comment, () => {\n            resetForm({})\n            setSubmitting(false)\n            setIsInput(false)\n            endRef.current?.scrollIntoView({ behavior: \"smooth\" })\n        })\n    }\n    const toggleInput = () => {\n        setIsInput(!isInput)\n    }\n\n    React.useEffect(() => {\n        if (isInput === true && null !== inputRef.current) inputRef.current.focus()\n    }, [isInput, comments])\n\n    React.useEffect(() => {\n        if (!isEmpty(formRef.current?.values.comment)) formRef.current?.resetForm()\n    }, [name, formRef])\n\n    return <div ref={endRef}><FormGroup >\n        <Label className=\"detail-task__title\" for={`user_${currentUser?.id}`}>Activity</Label>\n        <div className=\"detail-task__comment\">\n            <Components.Avata name={currentUser ? currentUser.name : \"\"} target={`current_user_${currentUser?.id}`} classNames=\"mr-2\" />\n            {isInput\n                ? <Formik\n                    innerRef={formRef}\n                    initialValues={{ comment: \"\" }}\n                    onSubmit={submitLogin}>\n                    {({ isSubmitting }) => (\n                        <Form className=\"w-100\">\n                            <Field name=\"comment\"\n                                type=\"textarea\"\n                                innerRef={inputRef}\n                                id={`user_${currentUser?.id}`}\n                                component={Components.ReactstrapFormik.BaseInput}\n                                placeholder=\"Nhập comment ...\" />\n\n                            <Button color=\"primary\"\n                                className=\"mr-2\"\n                                disabled={isSubmitting}\n                                type=\"submit\">Lưu</Button>\n                            <Button\n                                type=\"button\" onClick={toggleInput}>Huỷ</Button>\n                        </Form>\n                    )}\n                </Formik>\n                : <Components.Can role={currentUser?.roles} action=\"create:task\">\n                    <div onClick={(toggleInput)} className=\"detail-task__comment-placeholder\">Add a comment...</div>\n                </Components.Can>}\n        </div>\n    </FormGroup>\n    </div>\n}\n\nexport const CommentInput = withRouter(CommentInputComponent)","import * as React from 'react';\nimport { Link, RouteComponentProps, withRouter } from 'react-router-dom';\nimport Utils from \"Utils\";\nimport { Icstasks } from 'Interface/Response/task_manager.types';\nimport { CardTitle, CardText, Badge } from 'reactstrap';\n// import * as Components from \"Components\";\nimport { connect } from 'react-redux';\nimport { RootState } from 'Store';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { RootAction } from 'Interface/Store/index.types';\nimport { createCommentInTask, selectDetailTask } from 'Store/actions/task_manager.actions';\nimport { CommentList } from './CommentList';\nimport { CommentInput } from './CommentInput';\n\ninterface IPropsComponent extends RouteComponentProps {\n    path: string,\n}\nconst mapState = (state: RootState) => ({\n    currentUser: state.layout.user,\n    task_manager: state.task_manager\n})\n\nconst mapAction = (dispatch: Dispatch<RootAction>) => bindActionCreators({\n    createCommentInTask, selectDetailTask\n}, dispatch)\n\ntype Iprops = ReturnType<typeof mapState> & ReturnType<typeof mapAction> & RouteComponentProps & IPropsComponent & Dispatch\n\nexport const DetailTaskComponent: React.FC<Iprops> = React.memo(({ path, task_manager, history, currentUser, createCommentInTask, selectDetailTask }) => {\n    let { name } = Utils.getQueryparams([\"name\"])\n    const refDetail = React.useRef<HTMLDivElement>(null)\n\n    React.useEffect(() => {\n        name && selectDetailTask(parseInt(name), (task: Icstasks) => {\n            if (!task) {\n                history.replace(path)\n            }\n            refDetail.current !== null && refDetail.current.scrollTo({ top: 0, behavior: \"smooth\" })\n        })\n    }, [history, name, path, selectDetailTask])\n\n\n\n    return name && task_manager.task_selected !== null\n        ? <div ref={refDetail} className=\"detail-task\">\n            <div className=\"detail-task__header\">\n                <div>{Utils.FormatDateBy_YYYY_MM_DD(task_manager.task_selected?.created_at)} - {Utils.converTime(task_manager.task_selected?.created_at)}</div>\n                <Link to={path}>\n                    <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\n                </Link>\n            </div>\n            <div className=\"detail-task__body\">\n                <div className=\"detail-task__title\">{task_manager.task_selected?.cs_note}</div>\n                <div className=\"my-2\">\n                    {task_manager.task_selected?.failure_type_names.map((item, index) =>\n                        <Badge\n                            color=\"primary\"\n                            pill\n                            className={index !== 0 ? \"mx-1\" : \"\"}\n                            key={`failure_type_${index}`}>{item}</Badge>)}\n                </div>\n                <div>\n                    <CardTitle>Thông tin đơn hàng</CardTitle>\n                    <CardText>G/T đơn hàng: {Utils.formatCurrency(task_manager.task_selected.total)}</CardText>\n                    <CardText>S/L sản phẩm{task_manager.task_selected.quantity_counter}</CardText>\n                    <CardText>{task_manager.task_selected.so_id}</CardText>\n                    <CardText>{task_manager.task_selected.order_id}</CardText>\n                    <CardText>{task_manager.task_selected.order_status}</CardText>\n                    <CardText>{task_manager.task_selected.return_id}</CardText>\n                    <CardText >Mã return: {task_manager.task_selected.return_id}</CardText>\n                    <CardTitle>Thông tin Khách hàng</CardTitle>\n                    <CardText>Nhà thuốc: {task_manager.task_selected.business_name}</CardText>\n                    <CardText>Khách hàng: {task_manager.task_selected.user_name}</CardText>\n                    <CardText>SĐT: {task_manager.task_selected.user_phone}</CardText>\n                </div>\n                <div className=\"detail-task__activity\" >\n                    <CommentInput name={name} CreateComment={createCommentInTask} currentUser={currentUser} comments={task_manager.task_selected.comments} />\n                    <CommentList comments={task_manager.task_selected.comments} />\n                </div>\n            </div>\n        </div>\n        : null\n})\nexport const DetailTask = connect(mapState, mapAction)(withRouter(DetailTaskComponent))","import * as React from \"react\";\n\nexport const HeaderBoard: React.FC<any> = React.memo(() =>\n    <thead>\n        <tr>\n            <th style={{ width: \"10%\" }}>#</th>\n            <th style={{ width: \"15%\" }}>#SO</th>\n            <th style={{\n                textOverflow: \"ellipsis\",\n                whiteSpace: \"nowrap\",\n                maxWidth: \"60%\"\n            }}>Ghi chú</th>\n            <th style={{ width: \"20%\", textAlign: \"right\" }}>Trạng thái</th>\n        </tr>\n    </thead>\n)","import * as React from \"react\";\nimport { Badge } from \"reactstrap\";\nimport classNames from \"classnames\";\nimport { Link, RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { StatusTask } from \"Utils\";\nimport { Icstasks } from \"Interface/Response/task_manager.types\";\nimport * as Components from \"Components\";\n\n\n\ninterface IListTaskProps extends RouteComponentProps {\n    loading: boolean,\n    cs_tasks: Icstasks[],\n    path: string,\n    taskSelected: number\n}\n\nexport const ListTaskComponent: React.FC<IListTaskProps> = ({ loading, cs_tasks, history, path, taskSelected }) => {\n    const handleClick = (id: number) => {\n        return history.replace(`${path}?name=${id}`)\n    }\n    return <tbody>\n        {loading\n            ? renderTableRow(<Components.Loading />)\n            : cs_tasks.length > 0\n                ? cs_tasks.map((item, index) =>\n                    <tr\n                        key={`task_item_${index}`}\n                        onClick={() => handleClick(item.id)}\n                        className={classNames(\"cursor-pointer\", { \"active\": taskSelected === item.id })}>\n                        <td>\n                            <Link to={`${path}?name=${item.id}`}>{item.id}</Link>\n                        </td>\n                        <td>{item.so_id}</td>\n                        <td><div style={{ whiteSpace: \"nowrap\", textOverflow: \"ellipsis\", overflow: \"hidden\" }}>{item.cs_note}</div></td>\n                        <td >\n                            <div className=\"d-flex justify-content-end align-items-center\">\n                                <div className=\"d-flex flex-column align-items-end mr-2\">\n                                    <Badge color={classNames(\n                                        { primary: item.status === StatusTask.assigned },\n                                        { danger: item.status === StatusTask.pending },\n                                        { success: item.status === StatusTask.done },\n                                        { secondary: item.status === StatusTask.canceled },\n                                        { info: item.status === StatusTask.in_progress }\n                                    )}>{item.status}</Badge>\n                                    <Components.TimeAgo datetime={item.created_at} />\n                                </div>\n                                <Components.Avata name={item.created_by} target={`task-${item.id}`} />\n                            </div>\n                        </td>\n                    </tr>\n                )\n                : renderTableRow(<img src=\"https://assets.thuocsi.vn/assets/buymed/logos/logo-49156a6a8b6688f3eb1098b08d406267e8770cffd64b6f07bb31e2e52536346d.svg\" alt=\"empty_result\" />)}\n    </tbody>\n}\nconst renderTableRow = (component: React.ReactElement) => {\n    return <tr>\n        <td colSpan={4}>{component}</td>\n    </tr>\n}\n\nexport const ListTask = withRouter(ListTaskComponent)","import * as React from \"react\";\nimport { Table } from \"reactstrap\";\n\nimport { Icstasks } from \"Interface/Response/task_manager.types\";\nimport { DetailTask } from \"./DetailTask\";\nimport { HeaderBoard } from \"./Header\";\nimport { ListTask } from \"./ListTask\";\n\ninterface ITaskBoardProps {\n   cs_tasks: Icstasks[],\n   path: string,\n   loading: boolean,\n   taskSelected: number\n}\n\ntype IProps = ITaskBoardProps\n\nexport const TaskBoard: React.FC<IProps> = React.memo(({ cs_tasks, path, loading, taskSelected }) => {\n\n   return <div className=\"d-flex\">\n      <div className=\"sticky_table\">\n         <Table className=\"h-100 m-0\" hover style={{ width: \"100%\", tableLayout: \"fixed\" }} >\n            <HeaderBoard />\n            <ListTask cs_tasks={cs_tasks} loading={loading} taskSelected={taskSelected} path={path} />\n         </Table>\n      </div>\n      {!loading && <DetailTask path={path} />}\n   </div>\n})\n","import * as React from 'react';\nimport DateRangePicker, { } from \"react-datepicker\";\nimport { Label, Col } from 'reactstrap';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n\nexport const DatePicker = () => {\n    const [startDate, setStartDate] = React.useState(new Date());\n    const [endDate, setEndDate] = React.useState(new Date());\n\n    return <>\n        <Col md={2} className=\"d-flex\">\n            <div >\n                <Label for=\"exampleEmail\">Từ ngày</Label>\n                <DateRangePicker\n                    selected={startDate}\n                    onChange={(date: any) => setStartDate(date)}\n                    selectsStart\n                    startDate={startDate}\n                    endDate={endDate}\n                    className=\"form-control\"\n                />\n            </div>\n        </Col>\n        <Col md={2}>\n            <div className=\"\">\n                <Label for=\"exampleEmail\">Đến ngày</Label>\n                <DateRangePicker\n                    className=\"form-control\"\n                    selected={endDate}\n                    onChange={(date: any) => setEndDate(date)}\n                    selectsEnd\n                    maxDate={new Date()}\n                    startDate={startDate}\n                    endDate={endDate}\n                    minDate={startDate}\n                />\n            </div>\n        </Col>\n    </>\n}","import * as React from 'react';\nimport { FormGroup, Label, Input, Col } from 'reactstrap';\n\n\nexport const SearchOrder: React.FC<{}> = () => {\n\n    return <Col md={2}><FormGroup>\n        <Label >Mã SO</Label>\n        <Input type=\"search\" name=\"so_id\" placeholder=\"SO1111\" />\n    </FormGroup>\n    </Col>\n}","import * as React from 'react';\nimport { FormGroup, Label, Col } from 'reactstrap';\nimport { IResponseUser } from 'Interface/Response/session.types';\nimport Select from 'react-select'\n\ninterface ISelectAssignedMemberProps {\n    listMember: IResponseUser[]\n}\n\nexport const SelectAssignedMember: React.FC<ISelectAssignedMemberProps> = ({ listMember }) => {\n    return <Col md={2}>\n        <FormGroup>\n            <Label >Người tiếp nhận</Label>\n            <Select options={listMember.map(item => ({ label: item.name, value: item.id }))} />\n        </FormGroup>\n    </Col>\n}","import * as React from 'react';\nimport { FormGroup, Label, Col } from 'reactstrap';\nimport Select, { components } from 'react-select'\nimport { IResponeListReason } from 'Interface/Response/task_manager.types';\ninterface ISelectReasonProps {\n    listReason: IResponeListReason[]\n}\n\nexport const SelectReason: React.FC<ISelectReasonProps> = ({ listReason }) => {\n\n    const ValueContainer = ({ children, ...props }: any) => {\n        const selected = props.getValue();\n        const selectedC = React.Children.toArray(children).filter((it: any) => [\"Input\"].indexOf(it.type.name) >= 0)\n        const content = `${selected.length} items`\n        return <components.ValueContainer {...props}>\n            {content}\n            {selectedC}\n        </components.ValueContainer>\n    };\n\n    return <Col md={2}><FormGroup>\n        <Label >Lý do</Label>\n        <Select\n            options={listReason.map(item => ({ label: item.name, value: item.id }))}\n            isMulti\n            components={{ ValueContainer }}\n            closeMenuOnSelect={false}\n            openMenuOnClick={true}\n            hideSelectedOptions={false}\n        />\n    </FormGroup>\n    </Col>\n}","import * as React from 'react';\nimport { FormGroup, Label, Col } from 'reactstrap';\nimport Select from 'react-select'\n\nimport { DefaultValue } from \"Utils\";\n\nexport const SelectStatus: React.FC<{}> = () => {\n    return <Col md={2}>\n        <FormGroup>\n            <Label >Trạng thái</Label>\n            <Select\n                options={DefaultValue.listTaskStatus.map(item => ({ value: item.key, label: item.name }))}\n            />\n        </FormGroup>\n    </Col>\n}","import * as React from 'react';\nimport { Row } from 'reactstrap';\n\nimport { DatePicker } from \"./DatePicker\";\nimport { SearchOrder } from \"./SearchOrder\";\nimport { SelectAssignedMember } from \"./SelectAssignedMember\";\nimport { SelectReason } from \"./SelectReason\";\nimport { SelectStatus } from \"./SelectStatus\";\nimport { getListReason, getListMember } from 'Api/TaskManager';\nimport { IResponeListReason } from 'Interface/Response/task_manager.types';\nimport { IResponseUser } from 'Interface/Response/session.types';\n\n\n\nexport const FilterControl: React.FC<any> = () => {\n    const [listReason, setListReason] = React.useState<IResponeListReason[]>([])\n    const [listMember, setListMember] = React.useState<IResponseUser[]>([])\n\n    React.useEffect(() => {\n        Promise.all([getListReason(), getListMember()]).then(rsp => {\n            setListReason(rsp[0].data)\n            setListMember(rsp[1].data)\n        })\n    }, [])\n\n    return <div className='mb-2'>\n        <Row>\n            <DatePicker />\n            <SearchOrder />\n            <SelectStatus />\n            <SelectReason listReason={listReason} />\n            <SelectAssignedMember listMember={listMember} />\n        </Row>\n    </div>\n}","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { RootState } from 'Store';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { RootAction } from 'Interface/Store/index.types';\nimport { getListTask, getListTaskByFilter } from 'Store/actions/task_manager.actions';\nimport { Card, CardBody } from 'reactstrap';\nimport { useRouteMatch, RouteComponentProps } from 'react-router-dom';\nimport { TaskBoard } from './TaskBoard';\nimport { FilterControl } from './FilterControl';\nimport * as Components from \"Components\";\nimport { IUserInput } from 'Interface/Store/task_manager.types';\nimport Utils from \"Utils\";\n\nconst mapState = (state: RootState) => ({\n  task_manager_state: state.task_manager\n})\n\nconst mapAction = (dispatch: Dispatch<RootAction>) => bindActionCreators({\n  getListTask,\n  getListTaskByFilter\n}, dispatch)\n\ntype Iprops = ReturnType<typeof mapState> & ReturnType<typeof mapAction> & RouteComponentProps\n\nexport const TaskManagerScreenComponent: React.FC<Iprops> = ({ getListTask, task_manager_state, getListTaskByFilter, history }) => {\n  let { path } = useRouteMatch();\n  let { name } = Utils.getQueryparams([\"name\"])\n\n  React.useEffect(() => {\n    getListTask()\n  }, [getListTask])\n\n  const handlePagination = React.useCallback((value) => {\n    const { userInput } = task_manager_state\n    const user_input: IUserInput = {\n      ...userInput,\n      page: value\n    }\n    if (name) history.replace(path)\n    getListTaskByFilter(user_input)\n  }, [getListTaskByFilter, task_manager_state, name, history, path])\n\n  return <div className=\"row\">\n    <div className=\"col-lg-12 stretch-card\">\n      <Card>\n        <CardBody>\n          <FilterControl />\n          <TaskBoard\n            cs_tasks={task_manager_state.cs_tasks}\n            path={path}\n            loading={task_manager_state.loading}\n            taskSelected={parseInt(name)} />\n          <Components.PaginationBar\n            current={task_manager_state.userInput.page}\n            perpage={30}\n            totalRecords={task_manager_state.total_count}\n            size={\"sm\"}\n            onChangePage={(value: number) => handlePagination(value)} />\n        </CardBody>\n      </Card>\n    </div>\n  </div>\n}\n\n\n\n// {/* <div className=\"page-header\">\n//             <h3 className=\"page-title\"> Basic Tables </h3>\n//             <nav aria-label=\"breadcrumb\">\n//                 <ol className=\"breadcrumb\">\n//                     <li className=\"breadcrumb-item\"><a href=\"!#\" onClick={event => event.preventDefault()}>Tables</a></li>\n//                     <li className=\"breadcrumb-item active\" aria-current=\"page\">Basic tables</li>\n//                 </ol>\n//             </nav>\n//         </div> */}\n\n// <tr className=\"table-info\">\n//                                 <td> 1 </td>\n//                                 <td> Herman Beck </td>\n//                                 <td> Photoshop </td>\n//                                 <td> $ 77.99 </td>\n//                                 <td> May 15, 2015 </td>\n//                             </tr>\n//                             <tr className=\"table-warning\">\n//                                 <td> 2 </td>\n//                                 <td> Messsy Adam </td>\n//                                 <td> Flash </td>\n//                                 <td> $245.30 </td>\n//                                 <td> July 1, 2015 </td>\n//                             </tr>\n//                             <tr className=\"table-danger\">\n//                                 <td> 3 </td>\n//                                 <td> John Richards </td>\n//                                 <td> Premeire </td>\n//                                 <td> $138.00 </td>\n//                                 <td> Apr 12, 2015 </td>\n//                             </tr>\n//                             <tr className=\"table-success\">\n//                                 <td> 4 </td>\n//                                 <td> Peter Meggik </td>\n//                                 <td> After effects </td>\n//                                 <td> $ 77.99 </td>\n//                                 <td> May 15, 2015 </td>\n//                             </tr>\n//                             <tr className=\"table-primary\">\n//                                 <td> 5 </td>\n//                                 <td> Edward </td>\n//                                 <td> Illustrator </td>\n//                                 <td> $ 160.25 </td>\n//                                 <td> May 03, 2015 </td>\n//                             </tr>\n\nexport const TaskManagerScreen = connect(mapState, mapAction)(TaskManagerScreenComponent)","import * as React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst ListMenu = [\n    {\n        name: \"Quản lý task\",\n        icon: \"fa-tasks\",\n        path: \"/admin/task-manager\"\n    },\n    {\n        name: \"Danh sách file\",\n        icon: \"fa-file\",\n        path: \"/admin/files\"\n    }\n]\n\n\nexport const SideBar: React.SFC<{}> = () => {\n\n    React.useEffect(() => {\n        onRouteChanged()\n        const body = document.querySelector('body');\n        document.querySelectorAll('.sidebar .nav-item').forEach((el) => {\n            el.addEventListener('mouseover', function () {\n                if (body && body.classList.contains('sidebar-icon-only')) {\n                    el.classList.add('hover-open');\n                }\n            });\n            el.addEventListener('mouseout', function () {\n                if (body && body.classList.contains('sidebar-icon-only')) {\n                    el.classList.remove('hover-open');\n                }\n            });\n        })\n    }, [])\n\n    const onRouteChanged = () => {\n        // document.querySelector('#sidebar').classList.remove('active');\n        // document.querySelector('#sidebar')?.classList.remove('active')\n        // console.log(document.querySelector('#sidebar')?.classList)\n    }\n\n\n    return (\n        <nav className=\"sidebar sidebar-offcanvas\" id=\"sidebar\">\n            <div className=\"text-center sidebar-brand-wrapper d-flex align-items-center\">\n                <div className=\"sidebar-brand brand-logo\"><Logo /></div>\n                <a className=\"sidebar-brand brand-logo-mini pt-3\" href=\"index.html\">\n                    <svg width=\"38\" height=\"38\" viewBox=\"0 0 38 38\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <circle cx=\"19\" cy=\"19\" r=\"17\" fill=\"#00B46E\" stroke=\"#00B46E\" strokeWidth=\"4\" />\n                        <path d=\"M26.0834 12.6164V16.3223H19.8033V23.4239C19.8033 24.2759 20.0345 24.9514 20.497 25.4504C20.9717 25.9372 21.6228 26.1806 22.4504 26.1806C23.5701 26.1806 24.7811 25.8459 26.0834 25.1765V29.1016C24.3551 29.8196 22.6816 30.1787 21.0629 30.1787C18.9453 30.1787 17.3022 29.631 16.1338 28.5356C14.9654 27.4403 14.3812 25.8337 14.3812 23.716V16.3223H11.9167V15.2635L19.1278 7.19434H19.8033V12.6164H26.0834Z\" fill=\"white\" />\n                    </svg>\n                </a>\n            </div>\n            <ul className=\"nav\">\n                {ListMenu.map((item, index) => <li className=\"nav-item\" key={`side-menu-${item.name}-${index}`}>\n                    <NavLink to={item.path} activeClassName=\"active\" className=\"nav-link\" >\n                        <i className={`fa ${item.icon} menu-icon`} aria-hidden=\"true\"></i>\n                        <span className=\"menu-title\">{item.name}</span>\n                    </NavLink></li>)}\n            </ul>\n        </nav>\n    )\n}\n\nconst Logo = () => {\n    return <svg width=\"164\" height=\"40\" viewBox=\"0 0 164 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M60.6993 15.9458V19.3749H54.8885V25.9458C54.8885 26.7341 55.1024 27.3591 55.5304 27.8208C55.9696 28.2713 56.572 28.4965 57.3378 28.4965C58.3738 28.4965 59.4943 28.1868 60.6993 27.5675V31.1992C59.1002 31.8636 57.5518 32.1958 56.054 32.1958C54.0946 32.1958 52.5743 31.6891 51.4932 30.6756C50.4121 29.662 49.8716 28.1756 49.8716 26.2161V19.3749H47.5912V18.3952L54.2635 10.9289H54.8885V15.9458H60.6993Z\" fill=\"#00B46E\" />\n        <path d=\"M68.3851 8.2938V18.2938H68.4527C69.8491 16.5145 71.5326 15.6249 73.5033 15.6249C75.2038 15.6249 76.6002 16.1654 77.6925 17.2465C78.7961 18.3163 79.3479 19.8084 79.3479 21.7229V31.8918H74.331V22.787C74.331 20.4672 73.4696 19.3073 71.7466 19.3073C70.6092 19.3073 69.4887 20.1125 68.3851 21.7229V31.8918H63.3682V8.2938H68.3851Z\" fill=\"#00B46E\" />\n        <path d=\"M94.4662 31.8918V29.6114C92.9909 31.3343 91.2736 32.1958 89.3141 32.1958C87.5799 32.1958 86.1723 31.6609 85.0912 30.5911C84.0101 29.5213 83.4696 28.0404 83.4696 26.1485V15.9458H88.4864V25.8107C88.4864 27.8377 89.3254 28.8512 91.0033 28.8512C91.9493 28.8512 92.7545 28.4852 93.4189 27.7533C94.0945 27.01 94.4324 26.4638 94.4324 26.1147V15.9458H99.4831V31.8918H94.4662Z\" fill=\"#00B46E\" />\n        <path d=\"M111.865 15.6249C114.365 15.6249 116.482 16.3569 118.216 17.8208C119.962 19.2848 120.834 21.3231 120.834 23.9357C120.834 26.5596 119.95 28.5922 118.182 30.0337C116.414 31.4751 114.309 32.1958 111.865 32.1958C109.218 32.1958 107.051 31.4301 105.361 29.8985C103.684 28.3557 102.845 26.3569 102.845 23.9019C102.845 21.4019 103.7 19.3974 105.412 17.8884C107.135 16.3794 109.286 15.6249 111.865 15.6249ZM111.865 29.2229C114.263 29.2229 115.463 27.4154 115.463 23.8006C115.463 20.3434 114.263 18.6147 111.865 18.6147C110.716 18.6147 109.815 19.0708 109.162 19.983C108.52 20.8952 108.199 22.2015 108.199 23.9019C108.199 27.4492 109.421 29.2229 111.865 29.2229Z\" fill=\"#00B46E\" />\n        <path d=\"M138.149 27.5337V31.1316C136.189 31.8411 134.393 32.1958 132.76 32.1958C129.956 32.1958 127.715 31.447 126.037 29.9492C124.359 28.4402 123.52 26.447 123.52 23.9695C123.52 21.5483 124.365 19.5551 126.054 17.9897C127.754 16.4132 129.917 15.6249 132.54 15.6249C134.23 15.6249 136.02 15.974 137.912 16.6722V20.4053C136.527 19.6958 135.164 19.3411 133.824 19.3411C132.327 19.3411 131.127 19.7578 130.226 20.5911C129.325 21.4244 128.875 22.5393 128.875 23.9357C128.875 25.3434 129.314 26.4807 130.193 27.3479C131.071 28.2037 132.225 28.6316 133.655 28.6316C134.714 28.6316 136.212 28.2656 138.149 27.5337Z\" fill=\"#00B46E\" />\n        <path d=\"M152.473 16.8073V20.3715C150.558 19.2003 148.785 18.6147 147.152 18.6147C145.947 18.6147 145.345 19.0258 145.345 19.8479C145.345 20.0618 145.468 20.2758 145.716 20.4897C145.975 20.6925 146.949 21.1316 148.638 21.8073C150.328 22.4717 151.521 23.2431 152.22 24.1215C152.918 24.9999 153.267 25.9627 153.267 27.01C153.267 28.6654 152.704 29.9436 151.578 30.8445C150.452 31.7454 148.847 32.1958 146.763 32.1958C144.624 32.1958 142.721 31.8073 141.054 31.0303V27.4999C143.104 28.4008 144.821 28.8512 146.206 28.8512C147.828 28.8512 148.638 28.4571 148.638 27.6688C148.638 27.3647 148.486 27.0776 148.182 26.8073C147.89 26.537 146.887 26.0697 145.176 25.4053C143.464 24.7409 142.293 24.0089 141.662 23.2093C141.031 22.4098 140.716 21.5202 140.716 20.5404C140.716 19.0877 141.319 17.9053 142.524 16.9931C143.74 16.081 145.339 15.6249 147.321 15.6249C149.224 15.6249 150.941 16.019 152.473 16.8073Z\" fill=\"#00B46E\" />\n        <path d=\"M156.105 10.76C156.105 9.99425 156.375 9.3411 156.915 8.80056C157.456 8.26002 158.104 7.98975 158.858 7.98975C159.624 7.98975 160.277 8.26002 160.817 8.80056C161.358 9.3411 161.628 9.99425 161.628 10.76C161.628 11.5145 161.358 12.1677 160.817 12.7195C160.277 13.26 159.624 13.5303 158.858 13.5303C158.104 13.5303 157.456 13.26 156.915 12.7195C156.375 12.1677 156.105 11.5145 156.105 10.76ZM161.392 15.9458V31.8918H156.375V15.9458H161.392Z\" fill=\"#00B46E\" />\n        <circle cx=\"19\" cy=\"20\" r=\"17\" fill=\"#00B46E\" stroke=\"#00B46E\" strokeWidth=\"4\" />\n        <path d=\"M26.0834 13.6164V17.3223H19.8033V24.4239C19.8033 25.2759 20.0345 25.9514 20.497 26.4504C20.9717 26.9372 21.6228 27.1806 22.4504 27.1806C23.5701 27.1806 24.7811 26.8459 26.0834 26.1765V30.1016C24.3551 30.8196 22.6816 31.1787 21.0629 31.1787C18.9453 31.1787 17.3022 30.631 16.1338 29.5356C14.9654 28.4403 14.3812 26.8337 14.3812 24.716V17.3223H11.9167V16.2635L19.1278 8.19434H19.8033V13.6164H26.0834Z\" fill=\"white\" />\n    </svg>\n\n}","import * as React from 'react';\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport { RootState } from 'Store';\nimport { Dispatch, bindActionCreators } from 'redux';\nimport { RootAction } from 'Interface/Store/index.types';\nimport { connect } from 'react-redux';\nimport { signOut } from 'Store/actions/layout.actions';\n\nconst mapState = (state: RootState) => ({\n    user: state.layout.user\n})\nconst mapAction = (dispatch: Dispatch<RootAction>) => bindActionCreators({\n    signOut\n}, dispatch)\n\ntype Iprops = ReturnType<typeof mapState> & ReturnType<typeof mapAction>\n\nexport const NavBarComponent: React.SFC<Iprops> = ({ user, signOut }) => {\n    const toggleOffcanvas = () => {\n        document.querySelector('.sidebar-offcanvas')?.classList.toggle('active');\n    }\n\n    return <nav className=\"navbar col-lg-12 col-12 p-lg-0 fixed-top d-flex flex-row\">\n        <div className=\"navbar-menu-wrapper d-flex align-items-center justify-content-between\">\n            <a className=\"navbar-brand brand-logo-mini align-self-center d-lg-none\" href=\"!#\" onClick={evt => evt.preventDefault()}>Logo</a>\n            <button className=\"navbar-toggler navbar-toggler align-self-center\" type=\"button\" onClick={() => document.body.classList.toggle('sidebar-icon-only')}>\n                <i className=\"fa fa-bars\" aria-hidden=\"true\"></i>\n            </button>\n            <ul className=\"navbar-nav navbar-nav-right ml-lg-auto\">\n                <li className=\"nav-item nav-profile border-0\">\n                    <UncontrolledDropdown>\n                        <DropdownToggle className=\"bg-transparent nav-link\">\n                            <span className=\"toast-body\">{user && user.name}</span>\n                            <i className=\"fa fa-user-circle-o\" aria-hidden=\"true\"></i>\n                        </DropdownToggle>\n                        <DropdownMenu className=\"preview-list navbar-dropdown pb-3\" right>\n                            <DropdownItem className=\"dropdown-item mt-2\" onClick={signOut}>Đăng xuất</DropdownItem>\n                        </DropdownMenu>\n                    </UncontrolledDropdown>\n                </li>\n            </ul>\n            <button className=\"navbar-toggler navbar-toggler-right d-lg-none align-self-center\" type=\"button\" onClick={toggleOffcanvas}>\n                <i className=\"fa fa-bars\" aria-hidden=\"true\"></i>\n            </button>\n        </div>\n    </nav>\n}\nexport const NavBar = connect(mapState, mapAction)(NavBarComponent)","import * as React from 'react';\nimport { Switch, Route, useRouteMatch, Redirect } from 'react-router-dom';\nimport * as  Screens from \"Screens\";\n\nimport { SideBar } from \"./SideBar\";\nimport { NavBar } from \"./NavBar\";\n// import { Footer } from \"./Footer\";\nimport { connect } from 'react-redux';\nimport { RootState } from 'Store';\nimport { Dispatch, bindActionCreators } from 'redux';\nimport { RootAction } from 'Interface/Store/index.types';\nimport * as Components from \"Components\";\nimport { Button } from 'reactstrap';\n\n\nconst mapState = (state: RootState) => ({\n    role: state.layout.user?.roles\n})\n\nconst mapAction = (dispatch: Dispatch<RootAction>) => bindActionCreators({\n}, dispatch)\n\ntype IProps = ReturnType<typeof mapState> & ReturnType<typeof mapAction>\n\nconst AdminLayout: React.SFC<IProps> = ({ role }) => {\n    let { path } = useRouteMatch();\n    return <div className=\"container-scroller\">\n        <NavBar />\n        <div className=\"container-fluid page-body-wrapper\">\n            <SideBar />\n            <div className=\"main-panel\">\n                <div className=\"content-wrapper\">\n                    <Switch>\n                        <Route path={`${path}/task-manager`} component={Screens.TaskManagerScreen} />\n                        <Route path={`${path}/files`} component={Topic} />\n                        <Redirect to={`${path}/task-manager`} />\n                    </Switch>\n                </div>\n                {/* <Footer /> */}\n            </div>\n        </div>\n    </div>\n}\n\nconst Topic = ({ role }: any) => {\n    // let { topicId } = useParams();\n    return <div>\n        {/* {topicId} */}\n        <Components.Can role={role}>\n            <Button>CLick</Button>\n        </Components.Can>\n    </div>\n}\n\nexport default connect(mapState, mapAction)(AdminLayout)"],"sourceRoot":""}